{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 2 - Crear y consultar una Base de Datos Relacional con MySQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejercicio 1\n",
    "\n",
    "<b>Requisito:</b>\n",
    "- Descargar el archivo <a href=\"./sakila-db.zip\">sakila-db.zip</a>\n",
    "\n",
    "<b>Problema: Un poco de retro-ingeniería...</b>\n",
    "\n",
    "Tienen a su disposición el archivo sakila-db.zip, lo cual contiene dos archivos:\n",
    "- 'sakila-schema.sql' : una serie de instrucciones en lenguaje SQL para crear una Base de Datos llamada 'sakila'\n",
    "- 'sakila-data.sql' : una serie de instrucciones en SQL para insertar datos en la Base de Datos\n",
    "\n",
    "A partir de estos archivos, el ejercicio consiste en deducir el Modelo Lógico de Datos (Modelo Relacional) y el Modelo Conceptual de Datos (Modelo Entidad-Asociación).\n",
    "\n",
    "- MLD: <b>por completar</b>\n",
    "\n",
    "- MCD: <b>por completar</b>\n",
    "\n",
    "- ¿De qué podría servir esta base de datos? ¿Cuál era su aplicación probable? ¿Cuál sería una adaptación posible más moderna? \n",
    "<b>por responder</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejercicio 2\n",
    "\n",
    "<b>Requisito:</b>\n",
    "- Haber terminado el ejercicio 2\n",
    "\n",
    "<b>Problema: ¿Cómo importar una base de datos?</b>\n",
    "\n",
    "Queremos cargar la base de datos 'sakila' a partir de los 2 archivos .sql a nuestra disposición. ¿Cómo podemos hacer?\n",
    "\n",
    "<b>Ayuda:</b> Revisar la página de documentación de MySQL que explica cómo ejecutar instrucciones SQL desde un archivo https://dev.mysql.com/doc/refman/8.0/en/mysql-batch-commands.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejercicio 3\n",
    "\n",
    "<b>Requisito:</b>\n",
    "- Haber terminado el ejercicio 3 y haber importado los datos en su MySQL local.\n",
    "\n",
    "<b>Problema: Realizar consultas <code>SELECT</code> simple</b>\n",
    "\n",
    "Desde un entorno Python (o MySQL CLI o MySQL Workbench), realizar los comandos SQL que permiten responder a las consultas siguientes. (No olviden utilizar el comando SQL <code>USE [database-name]</code> ;-))\n",
    "\n",
    "<b> Ayuda: http://www.mysqltutorial.org/basic-mysql-tutorial.aspx</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "No module named pandas",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-773a2fc68200>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmysql\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mHTML\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#reemplazar 'root' por el password del usuario administrador de MySQL\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: No module named pandas"
     ]
    }
   ],
   "source": [
    "import mysql.connector\n",
    "import pandas as pd\n",
    "from IPython.display import display,HTML\n",
    "\n",
    "#reemplazar 'root' por el password del usuario administrador de MySQL\n",
    "db_connection = mysql.connector.connect(user=\"root\",host=\"localhost\",password=\"root\")\n",
    "cursor = db_connection.cursor()\n",
    "cursor.execute(\"USE sakila\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) A partir de la tabla \"film\", mostrar solamente cuáles son los títulos de pelicula disponibles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ACADEMY DINOSAUR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ACE GOLDFINGER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ADAPTATION HOLES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFFAIR PREJUDICE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFRICAN EGG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AGENT TRUMAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AIRPLANE SIERRA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AIRPORT POLLOCK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ALABAMA DEVIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ALADDIN CALENDAR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              title\n",
       "0  ACADEMY DINOSAUR\n",
       "1    ACE GOLDFINGER\n",
       "2  ADAPTATION HOLES\n",
       "3  AFFAIR PREJUDICE\n",
       "4       AFRICAN EGG\n",
       "5      AGENT TRUMAN\n",
       "6   AIRPLANE SIERRA\n",
       "7   AIRPORT POLLOCK\n",
       "8     ALABAMA DEVIL\n",
       "9  ALADDIN CALENDAR"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_sql('SELECT title FROM film LIMIT 10;', con=db_connection)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) A partir de la tabla \"film\", mostrar de qué años son las peliculas disponibles. NB: utilizar la instrucción <code>DISTINCT</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>release_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   release_year\n",
       "0          2006"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_sql('SELECT DISTINCT release_year FROM film LIMIT 10;', con=db_connection)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3) Mostrar los títulos de pelicula en la tabla \"film\" que se puede arrendar por más de 4 días (rental_duration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>rental_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ACADEMY DINOSAUR</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ADAPTATION HOLES</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFFAIR PREJUDICE</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFRICAN EGG</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AIRPLANE SIERRA</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AIRPORT POLLOCK</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ALADDIN CALENDAR</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ALAMO VIDEOTAPE</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ALASKA PHANTOM</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ALI FOREVER</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              title  rental_duration\n",
       "0  ACADEMY DINOSAUR                6\n",
       "1  ADAPTATION HOLES                7\n",
       "2  AFFAIR PREJUDICE                5\n",
       "3       AFRICAN EGG                6\n",
       "4   AIRPLANE SIERRA                6\n",
       "5   AIRPORT POLLOCK                6\n",
       "6  ALADDIN CALENDAR                6\n",
       "7   ALAMO VIDEOTAPE                6\n",
       "8    ALASKA PHANTOM                6\n",
       "9       ALI FOREVER                4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_sql('SELECT title, rental_duration '\n",
    "                 + 'FROM film '\n",
    "                 + 'WHERE rental_duration>=4 LIMIT 10;', con=db_connection)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4) En la tabla \"payment\", mostrar el customer_id, rental_id, amount y payment_date de todos los arriendos realizados entre las fechas 2005-07-01 y 2005-08-01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-99b8834065b2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m df = pd.read_sql('SELECT customer_id, rental_id, amount, payment_date '\n\u001b[0m\u001b[1;32m      2\u001b[0m         \u001b[0;34m+\u001b[0m \u001b[0;34m'FROM payment '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         + 'WHERE payment_date BETWEEN \\\"2005-07-01\\\" AND \\\"2005-08-01\\\" LIMIT 10;', con=db_connection)\n\u001b[1;32m      4\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "df = pd.read_sql('SELECT customer_id, rental_id, amount, payment_date '\n",
    "        + 'FROM payment '\n",
    "        + 'WHERE payment_date BETWEEN \\\"2005-07-01\\\" AND \\\"2005-08-01\\\" LIMIT 10;', con=db_connection)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejercicio 4\n",
    "\n",
    "<b>Requisito:</b>\n",
    "- Haber terminado el ejercicio 4\n",
    "\n",
    "<b>Problema: Realizar consultas <code>SELECT</code> con funciones de agregación </b>\n",
    "\n",
    "Desde un entorno Python (o MySQL CLI o MySQL Workbench), realizar los comandos SQL que permiten responder a las consultas siguientes.\n",
    "\n",
    "<b> Ayuda: http://www.mysqltutorial.org/basic-mysql-tutorial.aspx</b>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Contar el número de clientes en la tabla \"CUSTOMER\"\n",
    "\n",
    "    SELECT COUNT(*) FROM customer;\n",
    "    >>599\n",
    "    \n",
    "2) En la tabla \"RENTAL\", contar cuánto arriendos se realizó por cada cliente (NB: utilizar la instucción <code>GROUP BY</code> y <code>COUNT</code>)\n",
    "    \n",
    "    usé la siguiente consulta:\n",
    "    \n",
    "    SELECT COUNT(*) FROM rental GROUP BY customer_id LIMIT 10;\n",
    "    \n",
    "    y recibí una tabla con las columnas # y COUNT(*) que mostraban la cantidad de arriendos por cliente.\n",
    "\n",
    "3) ¿Qué devuelve la consulta SQL siguiente?\n",
    "<code>SELECT MAX(total) FROM (SELECT customer_id,count(*) as total FROM rental GROUP BY customer_id) as t1;</code>\n",
    "    \n",
    "    devuelve una tabla con una sola fila con # = 1 y MAX(total) = 46.\n",
    "    \n",
    "4) ¿Qué es un sub-consulta?\n",
    "\n",
    "    una subconsulta es una consulta dentro de una consulta, como se ve en el ejercicio anterior, despues del \n",
    "    FROM se encuentra una consulta SELECT dentro de un parentesis.\n",
    "    \n",
    "5) En la tabla \"payment\", mostrar el volumen de negocio realizado por cada miembro del staff (staff_id) en total.\n",
    "    \n",
    "    usando la consulta: SELECT SUM(amount) FROM payment GROUP BY staff_id LIMIT 10;\n",
    "    Obtuve: '33489.47' y '33927.04'\n",
    "\n",
    "    \n",
    "6) En una consulta, mostrar el staff_id que ha realizado más volumen de negocio el dia 2005-08-23.\n",
    "    \n",
    "    use la consulta:\n",
    "    SELECT staff_id FROM payment WHERE payment_date = \"2005-08-23\" GROUP BY staff_id ORDER BY SUM(amount) desc limit 1;\n",
    "    y no retorno nada, lo que indica que no hubo ventas ese dia.\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejercicio 5\n",
    "\n",
    "<b>Requisito:</b>\n",
    "- Haber terminado el ejercicio 4\n",
    "\n",
    "<b>Problema: Realizar consultas <code>SELECT</code> con operaciones de JOIN </b>\n",
    "\n",
    "Desde un entorno Python (o MySQL CLI o MySQL Workbench), realizar los comandos SQL que permiten responder a las consultas siguientes.\n",
    "\n",
    "<b> Ayuda: http://www.mysqltutorial.org/basic-mysql-tutorial.aspx</b>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) En las peliculas \"Film\" y \"Language\", mostrar el título de la pelicula y el nombre de su idioma. (NB: utilizar una operación de INNER JOIN)\n",
    "    \n",
    "    use la consulta:\n",
    "    SELECT title,name FROM language JOIN film on language.language_id = film.language_id LIMIT 10;\n",
    "\n",
    "2) Mostrar los nombres y apellidos de los clientes que han arrendado la pelicula \"CHICAGO NORTH\"\n",
    "    \n",
    "    use la consulta:\n",
    "    SELECT customer.first_name,customer.last_name,film.title FROM customer INNER JOIN rental ON customer.customer_id=rental.customer_id INNER JOIN inventory ON inventory.inventory_id=rental.inventory_id INNER JOIN film ON inventory.film_id=film.film_id WHERE film.title=\"CHICAGO NORTH\";\n",
    "    \n",
    "    y obtuve la siguiente tabla:\n",
    "    first_name,last_name,title\n",
    "    ARNOLD,HAVENS,\"CHICAGO NORTH\"\n",
    "    PENNY,NEAL,\"CHICAGO NORTH\"\n",
    "    MARGIE,WADE,\"CHICAGO NORTH\"\n",
    "    ALVIN,DELOACH,\"CHICAGO NORTH\"\n",
    "    CAROLE,BARNETT,\"CHICAGO NORTH\"\n",
    "    ALVIN,DELOACH,\"CHICAGO NORTH\"\n",
    "    KATIE,ELLIOTT,\"CHICAGO NORTH\"\n",
    "    RAMONA,HALE,\"CHICAGO NORTH\"\n",
    "    ADRIAN,CLARY,\"CHICAGO NORTH\"\n",
    "    TED,BREAUX,\"CHICAGO NORTH\"\n",
    "    DALE,RATCLIFF,\"CHICAGO NORTH\"\n",
    "    CRAIG,MORRELL,\"CHICAGO NORTH\"\n",
    "    BRITTANY,RILEY,\"CHICAGO NORTH\"\n",
    "    ANNIE,RUSSELL,\"CHICAGO NORTH\"\n",
    "    JUAN,FRALEY,\"CHICAGO NORTH\"\n",
    "    ERIK,GUILLEN,\"CHICAGO NORTH\"\n",
    "    \n",
    "3) Mostrar por cada nombres y apellidos de cliente, en qué ciudad viven (tabla Customer y City)\n",
    "    \n",
    "    use la consulta:\n",
    "    \n",
    "    SELECT customer.first_name,customer.last_name,city.city FROM city INNER JOIN address ON city.city_id=address.city_id INNER JOIN customer ON customer.address_id=address.address_id LIMIT 10;\n",
    "    \n",
    "    la cual retorno la siguiente tabla:\n",
    "    \n",
    "    first_name,last_name,city\n",
    "    MARY,SMITH,Sasebo\n",
    "    PATRICIA,JOHNSON,\"San Bernardino\"\n",
    "    LINDA,WILLIAMS,Athenai\n",
    "    BARBARA,JONES,Myingyan\n",
    "    ELIZABETH,BROWN,Nantou\n",
    "    JENNIFER,DAVIS,Laredo\n",
    "    MARIA,MILLER,Kragujevac\n",
    "    SUSAN,WILSON,Hamilton\n",
    "    MARGARET,MOORE,Masqat\n",
    "    DOROTHY,TAYLOR,Esfahan\n",
    "    \n",
    "    \n",
    "4) Mostrar cuántas veces fueron arrendadas las peliculas (mostrando el título de la pelicula)\n",
    "    use la consulta: \n",
    "    \n",
    "    SELECT count(rental.rental_id),film.title FROM rental INNER JOIN inventory on rental.inventory_id=inventory.inventory_id INNER JOIN film on inventory.film_id=film.film_id GROUP BY film.title LIMIT 10;\n",
    "    \n",
    "    la cual retorno la siguiente tabla:\n",
    "    \n",
    "    count(rental.rental_id),title\n",
    "    23,\"ACADEMY DINOSAUR\"\n",
    "    7,\"ACE GOLDFINGER\"\n",
    "    12,\"ADAPTATION HOLES\"\n",
    "    23,\"AFFAIR PREJUDICE\"\n",
    "    12,\"AFRICAN EGG\"\n",
    "    21,\"AGENT TRUMAN\"\n",
    "    15,\"AIRPLANE SIERRA\"\n",
    "    18,\"AIRPORT POLLOCK\"\n",
    "    12,\"ALABAMA DEVIL\"\n",
    "    23,\"ALADDIN CALENDAR\"\n",
    "    \n",
    "5) Mostrar qué pelicula generó más volumen de negocio\n",
    "    \n",
    "    use la consulta:\n",
    "    \n",
    "    SELECT film.title, SUM(payment.amount) FROM film INNER JOIN inventory ON film.film_id=inventory.film_id INNER JOIN rental ON inventory.inventory_id=rental.inventory_id INNER JOIN payment ON rental.rental_id=payment.rental_id GROUP BY film.title ORDER BY SUM(payment.amount) DESC LIMIT 1;\n",
    "    \n",
    "    la cual retorno la siguiente tabla:\n",
    "    \n",
    "    title,SUM(payment.amount)\n",
    "    \"TELEGRAPH VOYAGE\",231.73\n",
    "    \n",
    "6) Mostrar los clientes que arrendarón por más de 10 dolares de pelicula.\n",
    "\n",
    "    use la consulta:\n",
    "    \n",
    "    SELECT customer.first_name, customer.last_name, sum(payment.amount) FROM customer INNER JOIN payment ON payment.customer_id=customer.customer_id WHERE payment.amount > 10 GROUP BY customer.customer_id LIMIT 10;\n",
    "    \n",
    "    la cual retorno la siguiente tabla:\n",
    "    \n",
    "    first_name,last_name,sum(payment.amount)\n",
    "    PATRICIA,JOHNSON,10.99\n",
    "    LINDA,WILLIAMS,10.99\n",
    "    NANCY,THOMAS,10.99\n",
    "    KAREN,JACKSON,11.99\n",
    "    MICHELLE,CLARK,10.99\n",
    "    ANGELA,HERNANDEZ,10.99\n",
    "    ANNA,HILL,10.99\n",
    "    JANET,PHILLIPS,10.99\n",
    "    JOYCE,EDWARDS,10.99\n",
    "    DIANE,COLLINS,10.99\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
